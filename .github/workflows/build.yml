name: Build Controller

permissions:
  contents: write # Allow writing to repository contents (for pushing tags)
  actions: write # Allows triggering actions

on:
  workflow_dispatch:
    inputs:
      build_kernel_kebab_nameless15_a15:
        description: "Build Kernel OnePlus 8 (Nameless 15)?"
        required: true
        type: boolean
        default: true
      make_release:
        description: "Do you want to create a release?"
        required: true
        type: boolean
        default: true

jobs:
  build_kernel_kebab_nameless15_a15:
    uses: ./.github/workflows/build_kernel_kebab_nameless15_a15.yml
    secrets: inherit
    if: ${{ inputs.build_kernel_kebab_nameless15_a15 }}

  trigger-release:
    runs-on: ubuntu-latest
    needs:
      - build_kernel_kebab_nameless15_a15
    if: ${{ inputs.make_release }}
    env:
      REPO_OWNER: watercatlxh
      REPO_NAME: Kernel_Kebab_Nameless_15
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: "NonGKI Kernel Pre-built"
      RELEASE_NOTES: |
        Below is the codename reference table. Please select the image or archive you need based on this table.

        | Device Name | Codename | Kernel | System | Android | Method | KernelSU | SuSFS | LXC |
        |----------|----------|----------|----------|----------|----------|----------|----------|----------|
        | OnePlus 8T | kebab | 4.19 | Nameless 15 | 15 | AnyKernel3 | Next | ✅ | ❌ |

        - OnePlus 8, Nameless 15, in 9R may experience WiFi failure. Please flash with caution.
        - The KernelSU version is for reference only. It is normal for the KernelSU version embedded in SUSFS to be lower.

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Download Artifacts for A12 (Only if A12 Build is successful or input is true or empty)
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      # Get the Latest Tag from GitHub
      - name: Generate and Create New Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch the latest tag from GitHub (this is the latest tag based on the GitHub API)
          LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v1.1" # if have no any releases.
          fi

          NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')

          # Output the new tag to be used
          echo "New tag: $NEW_TAG"

          # Set the new tag as an environment variable to be used in later steps
          TIME=$(date +"%Y-%m-%d %H:%M.%S")
          echo "TIME=$TIME" >> $GITHUB_ENV
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV

          # Create the tag in the repository
          git tag $NEW_TAG
          git push --tags

          # Get KernelSU version
          git clone -b next-susfs https://github.com/KernelSU-Next/KernelSU-Next.git
          KSU_NEXT_VERSION=$(cd KernelSU-Next && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
          git clone -b magic https://github.com/backslashxx/KernelSU.git KernelSU-Magic
          KSU_MAGIC_VERSION=$(cd KernelSU-Magic && expr $(/usr/bin/git rev-list --count HEAD) + 10200 - 32)
          git clone -b main https://github.com/rsuntk/KernelSU.git KernelSU-rsuntk
          KSU_RSUNTK_VERSION=$(cd KernelSU-rsuntk && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
          git clone -b non-gki https://github.com/lightsummer233/KernelSU.git KernelSU-lightsummer233
          KSU_LIGHTSUMMER233_VERSION=$(cd KernelSU-lightsummer233 && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
          git clone -b nongki-susfs https://github.com/ShirkNeko/KernelSU.git KernelSU-mksu-skn
          KSU_MKSU_SKN_VERSION=$(cd KernelSU-mksu-skn && expr $(/usr/bin/git rev-list --count HEAD) + 10200)

          # Input release note
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "[KernelSU-Next](https://github.com/KernelSU-Next/KernelSU-Next) Version: $KSU_NEXT_VERSION  " >> $GITHUB_ENV
          echo "[KernelSU-Magic](https://github.com/backslashxx/KernelSU) Version: $KSU_MAGIC_VERSION  " >> $GITHUB_ENV
          echo "[KernelSU-rsuntk](https://github.com/rsuntk/KernelSU) Version: $KSU_RSUNTK_VERSION  " >> $GITHUB_ENV
          echo "[KernelSU-lightsummer233](https://github.com/lightsummer233/KernelSU) Version: $KSU_LIGHTSUMMER233_VERSION  " >> $GITHUB_ENV
          echo "[KernelSU-mksu-skn](https://github.com/ShirkNeko/KernelSU) Version: $KSU_MKSU_SKN_VERSION  " >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Create GitHub Release and upload files if make_release is true
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          prerelease: false
          release_name: "${{ env.RELEASE_NAME }} ${{ env.TIME }}"
          body: ${{ env.RELEASE_NOTES }}

      - name: Upload Release Assets Dynamically
        run: |
          # Loop through all files in the downloaded-artifacts directory
          for file in ./downloaded-artifacts/Kernel-*/*; do
              # Skip directories
              if [ -d "$file" ]; then
                  continue
              fi

              # Upload the file to the GitHub release
              echo "Uploading $file..."
              gh release upload ${{ env.NEW_TAG }} "$file"
          done

      # Display Files Uploaded
      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts/**/*
